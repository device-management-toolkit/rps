apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: postgresdb
  POSTGRES_USER: postgresadmin
  POSTGRES_PASSWORD: admin123
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-db
data:
  init.sql: |
    CREATE TABLE IF NOT EXISTS profiles(
      profile_name varchar(40),
      activation varchar(20),
      amt_password varchar(40),
      generate_random_password varchar(40),
      random_password_characters varchar(100),
      random_password_length integer,
      creation_date timestamp,
      created_by varchar(40),
      CONSTRAINT name UNIQUE(profile_name)
    );
    CREATE TABLE IF NOT EXISTS domains(
      name varchar(40),
      domain_suffix varchar(40),
      provisioning_cert text,
      provisioning_cert_storage_format varchar(40),
      provisioning_cert_key text,
      creation_date timestamp,
      created_by varchar(40),
      CONSTRAINT domainname UNIQUE(name)
    );
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rpsdata
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 5Gi
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: rpsdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: backenddb
          image: postgres:10.4
          ports:
            - containerPort: 5432
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/db-files
          envFrom:
            - configMapRef:
                name: postgres-config
          volumeMounts:
          - mountPath: "/var/lib/postgresql/data"
            name: volume
          - mountPath: "/docker-entrypoint-initdb.d"
            name: initdb
      volumes:
        - name: volume
          persistentVolumeClaim:
            claimName: rpsdata
        - name: initdb
          configMap:
              name: init-db
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
   - port: 5432
  selector:
   app: postgres