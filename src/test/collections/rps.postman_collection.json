{
	"info": {
		"_postman_id": "8b683029-41a5-4e22-a66d-0afce913c698",
		"name": "RPS API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Domains",
			"item": [
				{
					"name": "Get All Domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Domain that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {    \r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Request should fail when domain doesn't exist\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('Not Found')\r",
									"    pm.expect(jsonData.message).to.equal('Domain dontexist not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/dontexist",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"dontexist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain (NewDomain)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql('NewDomain')\r",
									"    pm.expect(result.domainSuffix).to.eql('NewDomain.com')\r",
									"    pm.expect(result.provisioningCert).to.eql()\r",
									"    pm.expect(result.provisioningCertStorageFormat).to.eql('raw')\r",
									"    pm.expect(result.provisioningCertPassword).to.eql()\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"NewDomain\",\r\n    \"domainSuffix\": \"NewDomain.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Domain - domain name case insensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {    \r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request should succeed\", function () {\r",
									"  var result = pm.response.json();\r",
									"  pm.expect(result.profileName).to.eql('NewDomain')\r",
									"  pm.expect(result.domainSuffix).to.eql('NewDomain.com')\r",
									"  pm.expect(result.provisioningCertStorageFormat).to.eql('raw')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/newdomain",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"newdomain"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain without suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't contain suffix\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Domain suffix name is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"domainSuffix\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't contain password\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Provisioning Cert Password is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"provisioningCertPassword\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with Invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when password is inavlid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"password\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with password length less than 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when password length is less than eight\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"passwo\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with password length greater than 32",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when password length greater than 32\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"0123456789012345678901234567890123456789\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain without cert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when certificate doesn't exist\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Provisioning certificate is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCert\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain without cert storage format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when cert storage format doesn't exist\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Provisioning Cert Storage Format is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertStorageFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"     pm.expect(result.errors[1].msg).to.eql(\"Provisioning Cert Storage Format should be either 'raw' or 'string'\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"provisioningCertStorageFormat\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with invalid cert storage format value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when storage format is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Provisioning Cert Storage Format should be either \\'raw\\' or \\'string\\'\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertStorageFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"wrong\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain (vprodemo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql('vprodemo')\r",
									"    pm.expect(result.domainSuffix).to.eql('vprodemo.com')\r",
									"    pm.expect(result.provisioningCert).to.eql()\r",
									"    pm.expect(result.provisioningCertStorageFormat).to.eql('raw')\r",
									"    pm.expect(result.provisioningCertPassword).to.eql()\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain Duplicate with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('Domain vproDemo ID or Suffix already exists')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vproDemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with Duplicate Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when Unique key is violated\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('Domain vprodemo ID or Suffix already exists')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Duplicate Domain Suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when Unique key is violated\", function () {\r",
									"   var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('Domain newvprodemo ID or Suffix already exists')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"newvprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Duplicate Domain Suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update should fail when unique key is violated\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('Domain vprodemo ID or Suffix already exists')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"NewDomain.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Cert Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"Intel123!\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"provisioning certificate\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"Intel123!\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Update should fail when it doesn't exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('Domain Domain not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"Domain\",\r\n    \"domainSuffix\": \"newDomain.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/vprodemo",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"vprodemo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Domain when it doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Deletion should fail when domain doesn't exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql(\"Domain vprodemo not found\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/vprodemo",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"vprodemo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Domain - domain name with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/newdomain",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"newdomain"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CIRA",
			"item": [
				{
					"name": "Get All CIRA Configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.equal(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CIRA Config that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {    \r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Request should fail when CIRA config doesn't exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('CIRA Config dontexist not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/dontexist",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"dontexist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS Cert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't contain mps cert\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS public root certificate is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsRootCertificate\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"password\": \"Intel123!\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"proxyDetails\": \"\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS port",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't contain mps port\", function () {\r",
									"     var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS port is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"username\": \"admin\",\r\n    \"password\": \"Intel123!\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"       \r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with MPS port less than 1024",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when mps port is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"mpsPort\": 1000,\r\n    \"username\": \"admin\",\r\n    \"password\": \"Intel123!\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with MPS port greater than 49151",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when mps port is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 50000,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid MPS port(value : wrong)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when mps port is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": \"wrong\",\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS address and with server address format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't conatain mps server address\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS server address is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsServerAddress\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid MPS username containing spaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS user name should be alphanumeric\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin user\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid MPS username containing special character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS user name should be alphanumeric\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin@user\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid MPS password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"password\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"adminuser\",\r\n\t\"password\": \"intel1234\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with MPS password length less than 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"password\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"adminuser\",\r\n\t\"password\": \"Intel@1\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with MPS password length greater than 32",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"password\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"adminuser\",\r\n\t\"password\": \"0123456789012345678901234567890123456789\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS user name is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"MPS user name should be alphanumeric\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[2].msg).to.eql(\"MPS password is required\")\r",
									"    pm.expect(result.errors[2].param).to.eql(\"password\")\r",
									"    pm.expect(result.errors[2].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[3].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[3].param).to.eql(\"password\")\r",
									"    pm.expect(result.errors[3].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS server address format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS server address format is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"serverAddressFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"MPS server address format should be either 3(IPV4) , 4(IPV6) or 201(FQDN)\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"serverAddressFormat\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with MPS Address format IPV6 and Address IPV4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"serverAddressFormat 4 requires IPV6 server address\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsServerAddress\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 4,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with Invalid MPS server address format(401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS server address format should be either 3(IPV4) , 4(IPV6) or 201(FQDN)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"serverAddressFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 401,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with Invalid MPS server address format(FQDN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS server address format should be either 3(IPV4) , 4(IPV6) or 201(FQDN)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"serverAddressFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": \"FQDN\",\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without authentication method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Authentication method is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"authMethod\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"Authentication method should be either 1 (Mutual Auth) or 2 (username and password)\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"authMethod\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid authentication method(value: 5)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Authentication method should be either 1 (Mutual Auth) or 2 (username and password)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"authMethod\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 5,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid authentication method(value: mutual)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Authentication method should be either 1 (Mutual Auth) or 2 (username and password)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"authMethod\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": \"mutual\",\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.configName).to.eql(\"ciraconfig2\")\r",
									"    pm.expect(result.mpsServerAddress).to.eql(\"192.168.8.50\"),\r",
									"\tpm.expect(result.mpsPort).to.eql(4433),\r",
									"\tpm.expect(result.username).to.eql(\"admin\"),\r",
									"\tpm.expect(result.password).to.eql(),\r",
									"\tpm.expect(result.commonName).to.eql(\"192.168.8.50\"),\r",
									"\tpm.expect(result.serverAddressFormat).to.eql(3),\r",
									"\tpm.expect(result.authMethod).to.eql(2),\r",
									"\tpm.expect(result.mpsRootCertificate).to.eql(\"rootcert\"),\r",
									"\tpm.expect(result.proxyDetails).to.eql(\"\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config duplicate with config name with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Unique key violation\")\r",
									"    pm.expect(result.message).to.eql(\"CIRA Config ciraConfig2 already exists.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraConfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CIRA Config with different config name case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.configName).to.eql(\"ciraconfig2\")\r",
									"    pm.expect(jsonData.mpsServerAddress).to.eql(\"192.168.8.50\")\r",
									"    pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"    pm.expect(jsonData.username).to.eql(\"admin\")\r",
									"    pm.expect(jsonData.password).to.eql()\r",
									"    pm.expect(jsonData.commonName).to.eql(\"192.168.8.50\")\r",
									"    pm.expect(jsonData.serverAddressFormat).to.eql(3)\r",
									"    pm.expect(jsonData.authMethod).to.eql(2)\r",
									"    pm.expect(jsonData.mpsRootCertificate).to.eql(\"rootcert\")\r",
									"    pm.expect(jsonData.proxyDetails).to.eql(\"\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraConfig2",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"ciraConfig2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config Already Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should not succeed if exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('CIRA Config ciraconfig2 already exists.')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"Intel123!\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 201,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config server address without server address format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"serverAddressFormat is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsServerAddress\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.55\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config server address with server address format 3 and no CN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"commonName is required when serverAddressFormat is 3\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsServerAddress\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.55\",\r\n    \"serverAddressFormat\": 3\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config CN without server address and format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"serverAddressFormat and mpsServerAddress is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"commonName\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"commonName\": \"192.168.8.55\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with invalid MPS password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"password\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"password\": \"intel1234\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with MPS password length less than 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"password\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"password\": \"Intel@1\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with MPS password length greater than 32",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should contain at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"password\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"password\": \"0123456789012345678901234567890123456789\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with invalid MPS port less than 1024",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsPort\": 433\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with MPS port greater than 49151",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsPort\": 50000\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with invalid MPS port(value: wrong)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsPort\": \"wrong\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS user name accepts letters, numbers, special characters and no spaces\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"username\": \"admin user\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" pm.test(\"Result should be equal to example\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.configName).to.eql(\"ciraconfig2\")\r",
									"        pm.expect(jsonData.mpsServerAddress).to.eql(\"192.168.8.55\")\r",
									"        pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"        pm.expect(jsonData.username).to.eql(\"admin\")\r",
									"        pm.expect(jsonData.password).to.eql()\r",
									"        pm.expect(jsonData.commonName).to.eql(\"192.168.8.55\")\r",
									"        pm.expect(jsonData.serverAddressFormat).to.eql(3)\r",
									"        pm.expect(jsonData.authMethod).to.eql(2)\r",
									"        pm.expect(jsonData.mpsRootCertificate).to.eql(\"rootcert\")\r",
									"        pm.expect(jsonData.proxyDetails).to.eql(\"\")\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.55\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"password\": \"Intel123!\",\r\n    \"commonName\": \"192.168.8.55\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with different config name case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" pm.test(\"Result should be equal to example\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.configName).to.eql(\"ciraconfig2\")\r",
									"        pm.expect(jsonData.mpsServerAddress).to.eql(\"192.168.8.5\")\r",
									"        pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"        pm.expect(jsonData.username).to.eql(\"admin\")\r",
									"        pm.expect(jsonData.password).to.eql()\r",
									"        pm.expect(jsonData.commonName).to.eql(\"192.168.8.5\")\r",
									"        pm.expect(jsonData.serverAddressFormat).to.eql(3)\r",
									"        pm.expect(jsonData.authMethod).to.eql(2)\r",
									"        pm.expect(jsonData.mpsRootCertificate).to.eql(\"rootcert\")\r",
									"        pm.expect(jsonData.proxyDetails).to.eql(\"\")\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraConfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.5\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"password\": \"Intel123!\",\r\n    \"commonName\": \"192.168.8.5\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove CIRA Config with different config name case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraConfig2",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"ciraConfig2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CIRA Config when it does not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Edit should not succeed if not exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('CIRA Config ciraconfig2 not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"password\": \"Intel123!\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 201,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove CIRA Config when it doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Deletion should fail with not found message\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('CIRA Config ciraconfig2 not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraconfig2",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"ciraconfig2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Get All Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.environment.unset(\"variable_key\");\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {    \r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Request should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('Profile profile1 not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile without activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Activation is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"Activation accepts either acmactivate(admin control activation) or ccmactivate(client control mode activation)\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with invalid activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when activation is inavlid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Activation accepts either acmactivate(admin control activation) or ccmactivate(client control mode activation)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"activate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ccmactivate profile without amt passwords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when activation is valid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Either generateRandomPassword should be enabled with amtPassword or should provide amtPassword\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ccmactivate with amtPassword and generate random password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains both amtPassword and generate random password\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Either generate Random AMT Password should be enabled with Password Length or should provide AMT Password\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"generateRandomPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomPassword\": true,\r\n    \"passwordLength\": 8,\r\n    \"activation\": \"ccmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ccmactivate with invalid amtPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains invalid amtPassword\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"AMT password is required field should contains at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"amtPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123\",\r\n    \"generateRandomPassword\": false,\r\n    \"passwordLength\": null,\r\n    \"activation\": \"ccmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ccmactivate with generate random password but no length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains generate random password without password length\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"If generate random AMT password is enabled, passwordLength is mandatory\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"generateRandomPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": true,\r\n    \"activation\": \"ccmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ccmactivate with generate random password and length < 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload conatins generate random password and password length less than 8\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Random AMT password length value should range between 8 and 32\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"passwordLength\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": true,\r\n    \"passwordLength\": 6,\r\n    \"activation\": \"ccmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ccmactivate with generate random password and length > 32",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload conatins generate random password and password length greater than 32\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Random AMT password length value should range between 8 and 32\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"passwordLength\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": true,\r\n    \"passwordLength\": 33,\r\n    \"activation\": \"ccmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with acmactivate but no mebxPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains acmactivate but no mebxPassword\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Either generateRandomMEBxPassword should be enabled with mebxPasswordLength or should provide mebxPassword\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"activation\": \"acmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create acmactivate with invalid mebxPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when mebxPassword is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MEBx password is required field should contains at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mebxPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"mebxPasswordLength\": null,\r\n    \"mebxPassword\": \"Intel123\",\r\n    \"activation\": \"acmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create acmactivate with generate mebx random password but no length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains generate mebx random password but no password length\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"If generate random MEBx password is enabled, mebxPasswordLength is mandatory\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"generateRandomMEBxPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"activation\": \"acmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create acmactivate with generate mebx random password and length < 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains generate mebx random password and length less than 8\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Random MEBx password length value should range between 8 and 32\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mebxPasswordLength\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"mebxPasswordLength\": 6,\r\n    \"activation\": \"acmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create acmactivate with generate mebx random password but no length Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains generate mebx random password and length greater than 8\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Random MEBx password length value should range between 8 and 32\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mebxPasswordLength\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"mebxPasswordLength\": 33,\r\n    \"activation\": \"acmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profile6\"),\r",
									"    pm.expect(result.amtPassword).to.eql(),\r",
									"    pm.expect(result.mebxPassword).to.eql(),\r",
									"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
									"    pm.expect(result.tags.length).to.equal(1)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": false,\r\n    \"passwordLength\": null,\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"mebxPasswordLength\": null,\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profile6\"),\r",
									"    pm.expect(result.amtPassword).to.eql(),\r",
									"    pm.expect(result.mebxPassword).to.eql(),\r",
									"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
									"    pm.expect(result.tags.length).to.equal(1)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/Profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"Profile6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should not succeed if exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('AMT profile profile6 already exists')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": false,\r\n    \"passwordLength\": null,\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"mebxPasswordLength\": null,\r\n    \"activation\": \"acmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with invalid activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update should fail when payload contains invalid activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Activation accepts either acmactivate(admin control activation) or ccmactivate(client control mode activation)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"activate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update profile with invalid amtPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains invalid amtPassword\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"AMT password is required field should contains at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"amtPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": false,\r\n    \"passwordLength\": null,\r\n    \"amtPassword\": \"Intel123\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update profile with generate random password but no password length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains generate random password but no password length\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"If generate random AMT password is enabled, passwordLength is mandatory\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"generateRandomPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": true\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update profile with generate random password and length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.generateRandomPassword).to.equal(true)\r",
									"    pm.expect(jsonData.passwordLength).to.eql(16)\r",
									"    pm.expect(jsonData.generateRandomMEBxPassword).to.equal(false)\r",
									"    pm.expect(jsonData.mebxPasswordLength).to.eql(null)\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"passwordLength\": 16\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.generateRandomMEBxPassword).to.equal(false)\r",
									"    pm.expect(jsonData.mebxPasswordLength).to.eql(null)\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\")    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\"    \r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.generateRandomMEBxPassword).to.equal(false)\r",
									"    pm.expect(jsonData.mebxPasswordLength).to.eql(null)\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\")\r",
									"    pm.expect(jsonData.tags.length).to.equal(1)    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"tags\": [\"tag123\"]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile activation to acmactivate without mebx password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains acmactivate without mebx password\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Either generateRandomMEBxPassword should be enabled with mebxPasswordLength or should provide mebxPassword\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"acmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with generate random mebx password and length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.generateRandomPassword).to.equal(true)\r",
									"    pm.expect(jsonData.passwordLength).to.eql(16)\r",
									"    pm.expect(jsonData.generateRandomMEBxPassword).to.equal(true)\r",
									"    pm.expect(jsonData.mebxPasswordLength).to.eql(8)\r",
									"    pm.expect(jsonData.activation).to.equal(\"acmactivate\")    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"mebxPasswordLength\": 8,\r\n    \"activation\": \"acmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with static mebx password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.generateRandomPassword).to.equal(true)\r",
									"    pm.expect(jsonData.passwordLength).to.eql(16)\r",
									"    pm.expect(jsonData.generateRandomMEBxPassword).to.equal(false)\r",
									"    pm.expect(jsonData.mebxPasswordLength).to.eql(null)\r",
									"    pm.expect(jsonData.activation).to.equal(\"acmactivate\")    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"activation\": \"acmactivate\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with static amt password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.generateRandomPassword).to.equal(false)\r",
									"    pm.expect(jsonData.passwordLength).to.eql(null)\r",
									"    pm.expect(jsonData.generateRandomMEBxPassword).to.equal(false)\r",
									"    pm.expect(jsonData.mebxPasswordLength).to.eql(null)\r",
									"    pm.expect(jsonData.activation).to.equal(\"acmactivate\")    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile when it doesn't exist Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Deletion should fail when profile doesn't exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('Profile profile6 not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Networks",
			"item": [
				{
					"name": "Get All Networks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"});\r",
									"pm.test(\"Result 2 should be equal to examples\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].profileName).to.eql(\"dhcp_disabled\")\r",
									"    pm.expect(jsonData[0].dhcpEnabled).to.eql(false)\r",
									"    pm.expect(jsonData[0].staticIPShared).to.equal(true)\r",
									"    pm.expect(jsonData[0].ipSyncEnabled).to.eql(true)\r",
									"\r",
									"    pm.expect(jsonData[1].profileName).to.eql(\"dhcp_enabled\")\r",
									"    pm.expect(jsonData[1].dhcpEnabled).to.eql(true)\r",
									"    pm.expect(jsonData[1].staticIPShared).to.equal(false)\r",
									"    pm.expect(jsonData[1].ipSyncEnabled).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Network Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {    \r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"dhcp_enabled\")\r",
									"    pm.expect(jsonData.dhcpEnabled).to.eql(true)\r",
									"    pm.expect(jsonData.staticIPShared).to.equal(false)\r",
									"    pm.expect(jsonData.ipSyncEnabled).to.eql(true)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/dhcp_enabled",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								"dhcp_enabled"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Network Config that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {    \r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Get NETWORK config request should fail\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('Not Found')\r",
									"    pm.expect(jsonData.message).to.eql('NETWORK Config profile1 not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/profile1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								"profile1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Network Config without dhcpEnabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Request should fail as dhcpEnabled is mandatory\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"dhcpEnabled is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"dhcpEnabled\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"Must be a boolean, true or false\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"dhcpEnabled\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Network Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\"),\r",
									"    pm.expect(jsonData.dhcpEnabled).to.eql(true)\r",
									"    pm.expect(jsonData.staticIPShared).to.eql(false),\r",
									"    pm.expect(jsonData.ipSyncEnabled).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"dhcpEnabled\": true\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Network Config with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {    \r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.dhcpEnabled).to.eql(true)\r",
									"    pm.expect(jsonData.staticIPShared).to.equal(false)\r",
									"    pm.expect(jsonData.ipSyncEnabled).to.eql(true)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/Profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								"Profile6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Network Config Duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should not succeed if exists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('Unique key violation')\r",
									"    pm.expect(jsonData.message).to.eql('NETWORK Config profile6 already exists')\r",
									"});\r",
									"postman.setNextRequest(\"Create CIRA Config\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"dhcpEnabled\": true\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Network Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.dhcpEnabled).to.eql(false)\r",
									"    pm.expect(jsonData.staticIPShared).to.equal(true)\r",
									"    pm.expect(jsonData.ipSyncEnabled).to.eql(true)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"dhcpEnabled\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Network Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								"profile6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Network Config that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Deletion should fail when doesn't exists\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('Not Found')\r",
									"    pm.expect(jsonData.message).to.eql('NETWORK Config profile6 not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								"profile6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Network Config that doesn't exist Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Update should fail when doesn't exists\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('Not Found')\r",
									"    pm.expect(jsonData.message).to.eql('NETWORK Config profile6 not found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"dhcpEnabled\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/networkconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"networkconfigs",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Integration",
			"item": [
				{
					"name": "Create CIRA Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"     pm.expect(result.configName).to.eql(\"ciraconfig\")\r",
									"    pm.expect(result.mpsServerAddress).to.eql(\"192.168.8.50\"),\r",
									"\tpm.expect(result.mpsPort).to.eql(4433),\r",
									"\tpm.expect(result.username).to.eql(\"admin\"),\r",
									"\tpm.expect(result.password).to.eql(),\r",
									"\tpm.expect(result.commonName).to.eql(\"192.168.8.50\"),\r",
									"\tpm.expect(result.serverAddressFormat).to.eql(3),\r",
									"\tpm.expect(result.authMethod).to.eql(2),\r",
									"\tpm.expect(result.mpsRootCertificate).to.eql(\"rootcert\"),\r",
									"\tpm.expect(result.proxyDetails).to.eql(\"\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"password\": \"Intel123!\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profile-ciraconfig\"),\r",
									"    pm.expect(result.amtPassword).to.eql(),\r",
									"    pm.expect(result.mebxPassword).to.eql(),\r",
									"    pm.expect(result.activation).to.eql(\"acmactivate\"),\r",
									"    pm.expect(result.ciraConfigName).to.eql(\"ciraconfig\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile-ciraconfig\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomPassword\": false,\r\n    \"passwordLength\": null,\r\n    \"mebxPassword\": \"Intel123!\",\r\n     \"generateRandomMEBxPassword\": false,\r\n    \"mebxPasswordLength\": null,\r\n    \"activation\": \"acmactivate\",\r\n    \"ciraConfigName\": \"ciraconfig\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove CIRA Config associated with profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deletion should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"CIRA Config: ciraconfig associated with an AMT profile\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraconfig",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"ciraconfig"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CIRA Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.configName).to.eql(\"ciraconfig\")\r",
									"    pm.expect(jsonData.mpsServerAddress).to.equal(\"192.168.8.50\")\r",
									"    pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"    pm.expect(jsonData.username).to.equal(\"admin\")\r",
									"    pm.expect(jsonData.password).to.equal()\r",
									"    pm.expect(jsonData.commonName).to.eql(\"192.168.8.50\")\r",
									"    pm.expect(jsonData.serverAddressFormat).to.equal(3)    \r",
									"    pm.expect(jsonData.mpsRootCertificate).to.equal(\"rootcert\")\r",
									"    pm.expect(jsonData.proxyDetails).to.equal(\"\")\r",
									"    pm.expect(jsonData.authMethod).to.equal(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig\",\r\n    \"password\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile-ciraconfig",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile-ciraconfig"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove CIRA Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraconfig",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"ciraconfig"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {    \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Version request should succeed\", function () {\r",
							"    var result = pm.response.json();\r",
							"    pm.expect(result.protocolVersion).to.eql(\"4.0.0\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "X-RPS-API-Key",
						"type": "text",
						"value": "APIKEYFORRPS123!"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/v1/admin/version/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"admin",
						"version",
						""
					]
				}
			},
			"response": []
		}
	]
}