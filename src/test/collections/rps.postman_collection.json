{
	"info": {
		"_postman_id": "0fceb723-6616-4d10-a0e4-fa7e8cff251c",
		"name": "RPS API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Domains",
			"item": [
				{
					"name": "Get All Domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var headerEtag = pm.response.headers.get('Etag');\r",
									"pm.globals.set('etag', headerEtag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Domains expect Not Modified",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 304\", function () {\r",
									"    pm.response.to.have.status(304);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "max-age",
								"type": "text"
							},
							{
								"key": "If-None-Match",
								"value": "{{etag}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Domain that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {    \r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Request should fail when domain doesn't exist\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('Not Found')\r",
									"    pm.expect(jsonData.message).to.equal('Domain profile dontexist Not Found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/dontexist",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"dontexist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain (NewDomain)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql('NewDomain')\r",
									"    pm.expect(result.domainSuffix).to.eql('NewDomain.com')\r",
									"    pm.expect(result.provisioningCert).to.eql()\r",
									"    pm.expect(result.provisioningCertStorageFormat).to.eql('raw')\r",
									"    pm.expect(result.provisioningCertPassword).to.eql()\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"NewDomain\",\r\n    \"domainSuffix\": \"NewDomain.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Domain - domain name case insensitive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {    \r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request should succeed\", function () {\r",
									"  var result = pm.response.json();\r",
									"  pm.expect(result.profileName).to.eql('NewDomain')\r",
									"  pm.expect(result.domainSuffix).to.eql('NewDomain.com')\r",
									"  pm.expect(result.provisioningCertStorageFormat).to.eql('raw')\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/newdomain",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"newdomain"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain without suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't contain suffix\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Domain suffix name is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"domainSuffix\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't contain password\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Provisioning Cert Password is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with password length greater than 64",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when password length greater than 64\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should not exceed 64 characters in length\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo1\",\r\n    \"domainSuffix\": \"vprodemo.1com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"01234567890123456789012345678901234567890123456789012345678901234\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain without cert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when certificate doesn't exist\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Provisioning certificate is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCert\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain without cert storage format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when cert storage format doesn't exist\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Provisioning Cert Storage Format is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertStorageFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"     pm.expect(result.errors[1].msg).to.eql(\"Provisioning Cert Storage Format should be either 'raw' or 'string'\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"provisioningCertStorageFormat\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with invalid cert storage format value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when storage format is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Provisioning Cert Storage Format should be either \\'raw\\' or \\'string\\'\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertStorageFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"wrong\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain (vprodemo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql('vprodemo')\r",
									"    pm.expect(result.domainSuffix).to.eql('vprodemo.com')\r",
									"    pm.expect(result.provisioningCert).to.eql()\r",
									"    pm.expect(result.provisioningCertStorageFormat).to.eql('raw')\r",
									"    pm.expect(result.provisioningCertPassword).to.eql()\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"Pass\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain Duplicate with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('Domain vproDemo ID or Suffix already exists')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vproDemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with Duplicate Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when Unique key is violated\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('Domain vprodemo ID or Suffix already exists')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Duplicate Domain Suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when Unique key is violated\", function () {\r",
									"   var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('Domain newvprodemo ID or Suffix already exists')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"newvprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains?$top=10&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Domains with invalid query params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Request should fail with invalid query string\", function () {\r",
									"    var errors = pm.response.json().errors;\r",
									"    pm.expect(errors[0].param).to.equal('$top');\r",
									"    pm.expect(errors[0].msg).to.equal('The number of items to return should be a positive integer');\r",
									"\r",
									"    pm.expect(errors[1].param).to.equal('$skip');\r",
									"    pm.expect(errors[1].msg).to.equal('The number of items to skip before starting to collect the result set should be a positive integer');\r",
									"    \r",
									"    pm.expect(errors[2].param).to.equal('$count');\r",
									"    pm.expect(errors[2].msg).to.equal('To return total number of records in result set should be boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains?$top=ten&$skip=zero&$count=notboolean",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							],
							"query": [
								{
									"key": "$top",
									"value": "ten"
								},
								{
									"key": "$skip",
									"value": "zero"
								},
								{
									"key": "$count",
									"value": "notboolean"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Domains with count set to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.equal(2);\r",
									"    pm.expect(jsonData.totalCount).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains?$top=10&$skip=0&$count=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Domains with count set to false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains?$top=10&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\",\r\n    \"version\": \"744\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Suffix returns Conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\",\r\n    \"version\": \"123\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Suffix returns Precondition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"type": "text",
								"value": "123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\",\r\n    \"version\": \"123\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Duplicate Domain Suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"NewDomain.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\",\r\n    \"version\": \"748\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Cert Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"Intel123!\",\r\n    \"version\": \"748\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Cert Password with password length greater than 64",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Updaste should fail when password length greater than 64\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Password should not exceed 64 characters in length\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"provisioningCertPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"01234567890123456789012345678901234567890123456789012345678901234\",\r\n    \"version\": \"750\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"provisioning certificate\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"Intel123!\",\r\n    \"version\": \"750\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Update should fail when it doesn't exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('Domain profile Domain Not Found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"Domain\",\r\n    \"domainSuffix\": \"newDomain.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\",\r\n    \"version\": \"751\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/vprodemo",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"vprodemo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Domain when it doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Deletion should fail when domain doesn't exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql(\"Domain profile vprodemo Not Found\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/vprodemo",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"vprodemo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Domain - domain name with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/newdomain",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"newdomain"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "CIRA",
			"item": [
				{
					"name": "Get All CIRA Configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var headerEtag = pm.response.headers.get('ETag');\r",
									"    pm.globals.set('etag', headerEtag);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.equal(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All CIRA Configs expect Not Modified",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 304\", function () {\r",
									"    pm.response.to.have.status(304);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.true\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"value": "max-age",
								"type": "text"
							},
							{
								"key": "If-None-Match",
								"value": "{{etag}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs?$top=10&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CIRA Config that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {    \r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Request should fail when CIRA config doesn't exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('CIRA profile dontexist Not Found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/dontexist",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"dontexist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS Cert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't contain mps cert\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS public root certificate is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsRootCertificate\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"proxyDetails\": \"\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS port",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't contain mps port\", function () {\r",
									"     var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS port is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"       \r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with MPS port less than 1024",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when mps port is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"mpsPort\": 1000,\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with MPS port greater than 49151",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when mps port is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 50000,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid MPS port(value : wrong)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when mps port is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": \"wrong\",\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS address and with server address format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload doesn't conatain mps server address\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS server address is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsServerAddress\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid MPS username containing spaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS user name should be alphanumeric\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin user\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid MPS username containing special character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS user name should be alphanumeric\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin@user\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with random password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.configName).to.eql(\"test\")\r",
									"    pm.expect(result.mpsServerAddress).to.eql(\"192.168.8.50\"),\r",
									"\tpm.expect(result.mpsPort).to.eql(4433),\r",
									"\tpm.expect(result.username).to.eql(\"adminuser\"),\r",
									"\tpm.expect(result.commonName).to.eql(\"192.168.8.50\"),\r",
									"\tpm.expect(result.serverAddressFormat).to.eql(3),\r",
									"\tpm.expect(result.authMethod).to.eql(2),\r",
									"\tpm.expect(result.mpsRootCertificate).to.eql(\"rootcert\"),\r",
									"\tpm.expect(result.proxyDetails).to.eql(\"\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"test\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"adminuser\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS user name is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"MPS user name should be alphanumeric\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[2].msg).to.eql(\"MPS user name length should be in between 5 to 16\")\r",
									"    pm.expect(result.errors[2].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[2].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without MPS server address format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS server address format is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"serverAddressFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"MPS server address format should be either 3(IPV4) , 4(IPV6) or 201(FQDN)\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"serverAddressFormat\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with MPS Address format IPV6 and Address IPV4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"serverAddressFormat 4 requires IPV6 server address\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsServerAddress\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 4,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with Invalid MPS server address format(401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS server address format should be either 3(IPV4) , 4(IPV6) or 201(FQDN)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"serverAddressFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 401,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with Invalid MPS server address format(FQDN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS server address format should be either 3(IPV4) , 4(IPV6) or 201(FQDN)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"serverAddressFormat\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": \"FQDN\",\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config without authentication method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Authentication method is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"authMethod\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"Authentication method should be either 1 (Mutual Auth) or 2 (username and password)\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"authMethod\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid authentication method(value: 5)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Authentication method should be either 1 (Mutual Auth) or 2 (username and password)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"authMethod\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 5,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config with invalid authentication method(value: mutual)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Authentication method should be either 1 (Mutual Auth) or 2 (username and password)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"authMethod\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": \"mutual\",\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.configName).to.eql(\"ciraconfig2\")\r",
									"    pm.expect(result.mpsServerAddress).to.eql(\"192.168.8.50\"),\r",
									"\tpm.expect(result.mpsPort).to.eql(4433),\r",
									"\tpm.expect(result.username).to.eql(\"admin\"),\r",
									"\tpm.expect(result.password).to.eql(),\r",
									"\tpm.expect(result.commonName).to.eql(\"192.168.8.50\"),\r",
									"\tpm.expect(result.serverAddressFormat).to.eql(3),\r",
									"\tpm.expect(result.authMethod).to.eql(2),\r",
									"\tpm.expect(result.mpsRootCertificate).to.eql(\"rootcert\"),\r",
									"\tpm.expect(result.proxyDetails).to.eql(\"\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config duplicate with config name with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Unique key violation\")\r",
									"    pm.expect(result.message).to.eql(\"CIRA Config ciraConfig2 already exists.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraConfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CIRA Config with different config name case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.configName).to.eql(\"ciraconfig2\")\r",
									"    pm.expect(jsonData.mpsServerAddress).to.eql(\"192.168.8.50\")\r",
									"    pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"    pm.expect(jsonData.username).to.eql(\"admin\")\r",
									"    pm.expect(jsonData.password).to.eql()\r",
									"    pm.expect(jsonData.commonName).to.eql(\"192.168.8.50\")\r",
									"    pm.expect(jsonData.serverAddressFormat).to.eql(3)\r",
									"    pm.expect(jsonData.authMethod).to.eql(2)\r",
									"    pm.expect(jsonData.mpsRootCertificate).to.eql(\"rootcert\")\r",
									"    pm.expect(jsonData.proxyDetails).to.eql(\"\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraConfig2",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"ciraConfig2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config Already Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should not succeed if exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('CIRA Config ciraconfig2 already exists.')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig2\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 201,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All CIRA Configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to two\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.equal(2);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs?$top=10&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All CIRA Configs with invalid query params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Request should fail with invalid query string\", function () {\r",
									"    var errors = pm.response.json().errors;\r",
									"    pm.expect(errors[0].param).to.equal('$top');\r",
									"    pm.expect(errors[0].msg).to.equal('The number of items to return should be a positive integer');\r",
									"    pm.expect(errors[1].param).to.equal('$skip');\r",
									"    pm.expect(errors[1].msg).to.equal('The number of items to skip before starting to collect the result set should be a positive integer');\r",
									"    pm.expect(errors[2].param).to.equal('$count');\r",
									"    pm.expect(errors[2].msg).to.equal('To return total number of records in result set should be boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs?$top=string&$skip=zero&$count=boolean",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "string"
								},
								{
									"key": "$skip",
									"value": "zero"
								},
								{
									"key": "$count",
									"value": "boolean"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All CIRA Configs with count set to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.equal(2);\r",
									"    pm.expect(jsonData.totalCount).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs?$top=10&$skip=0&$count=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All CIRA Configs with count set to false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs?$top=10&$skip=0&$count=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CIRA Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/test",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config server address without server address format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"serverAddressFormat is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsServerAddress\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.55\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config server address with server address format 3 and no CN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"commonName is required when serverAddressFormat is 3\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsServerAddress\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.55\",\r\n    \"serverAddressFormat\": 3\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config CN without server address and format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"serverAddressFormat and mpsServerAddress is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"commonName\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"commonName\": \"192.168.8.55\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with invalid MPS port less than 1024",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsPort\": 433\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with MPS port greater than 49151",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsPort\": 50000\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with invalid MPS port(value: wrong)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS Port value should range between 1024 and 49151\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mpsPort\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsPort\": \"wrong\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should fail\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MPS user name should be alphanumeric\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"username\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"username\": \"admin user\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" pm.test(\"Result should be equal to example\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.configName).to.eql(\"ciraconfig2\")\r",
									"        pm.expect(jsonData.mpsServerAddress).to.eql(\"192.168.8.55\")\r",
									"        pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"        pm.expect(jsonData.username).to.eql(\"admin\")\r",
									"        pm.expect(jsonData.commonName).to.eql(\"192.168.8.55\")\r",
									"        pm.expect(jsonData.serverAddressFormat).to.eql(3)\r",
									"        pm.expect(jsonData.authMethod).to.eql(2)\r",
									"        pm.expect(jsonData.mpsRootCertificate).to.eql(\"rootcert\")\r",
									"        pm.expect(jsonData.proxyDetails).to.eql(\"\")\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.55\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.55\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\",\r\n    \"regeneratePassword\": false,\r\n    \"version\" : \"755\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config returns Conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									" pm.test(\"Result should be equal to example\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.configName).to.eql(\"ciraconfig2\")\r",
									"        pm.expect(jsonData.mpsServerAddress).to.eql(\"192.168.8.55\")\r",
									"        pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"        pm.expect(jsonData.username).to.eql(\"admin\")\r",
									"        pm.expect(jsonData.commonName).to.eql(\"192.168.8.55\")\r",
									"        pm.expect(jsonData.serverAddressFormat).to.eql(3)\r",
									"        pm.expect(jsonData.authMethod).to.eql(2)\r",
									"        pm.expect(jsonData.mpsRootCertificate).to.eql(\"rootcert\")\r",
									"        pm.expect(jsonData.proxyDetails).to.eql(\"\")\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.55\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.55\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\",\r\n    \"regeneratePassword\": false,\r\n    \"version\" : \"123\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config returns Precondition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"pm.test(\"Result should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.configName).to.eql(\"ciraconfig2\")\r",
									"    pm.expect(jsonData.mpsServerAddress).to.eql(\"192.168.8.55\")\r",
									"    pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"    pm.expect(jsonData.username).to.eql(\"admin\")\r",
									"    pm.expect(jsonData.commonName).to.eql(\"192.168.8.55\")\r",
									"    pm.expect(jsonData.serverAddressFormat).to.eql(3)\r",
									"    pm.expect(jsonData.authMethod).to.eql(2)\r",
									"    pm.expect(jsonData.mpsRootCertificate).to.eql(\"rootcert\")\r",
									"    pm.expect(jsonData.proxyDetails).to.eql(\"\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"type": "text",
								"value": "123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.55\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.55\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\",\r\n    \"regeneratePassword\": false,\r\n    \"version\" : \"123\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with Regenerate Password On",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" pm.test(\"Result should be equal to example\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.configName).to.eql(\"ciraconfig2\")\r",
									"        pm.expect(jsonData.mpsServerAddress).to.eql(\"192.168.8.55\")\r",
									"        pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"        pm.expect(jsonData.username).to.eql(\"admin\")\r",
									"        pm.expect(jsonData.commonName).to.eql(\"192.168.8.55\")\r",
									"        pm.expect(jsonData.serverAddressFormat).to.eql(3)\r",
									"        pm.expect(jsonData.authMethod).to.eql(2)\r",
									"        pm.expect(jsonData.mpsRootCertificate).to.eql(\"rootcert\")\r",
									"        pm.expect(jsonData.proxyDetails).to.eql(\"\")\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.55\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.55\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\",\r\n    \"regeneratePassword\": true,\r\n    \"version\": \"759\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit CIRA Config with different config name case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" pm.test(\"Result should be equal to example\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.configName).to.eql(\"ciraconfig2\")\r",
									"        pm.expect(jsonData.mpsServerAddress).to.eql(\"192.168.8.5\")\r",
									"        pm.expect(jsonData.mpsPort).to.eql(4433)\r",
									"        pm.expect(jsonData.username).to.eql(\"admin\")\r",
									"        pm.expect(jsonData.commonName).to.eql(\"192.168.8.5\")\r",
									"        pm.expect(jsonData.serverAddressFormat).to.eql(3)\r",
									"        pm.expect(jsonData.authMethod).to.eql(2)\r",
									"        pm.expect(jsonData.mpsRootCertificate).to.eql(\"rootcert\")\r",
									"        pm.expect(jsonData.proxyDetails).to.eql(\"\")\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraConfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.5\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.5\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\",\r\n    \"version\": \"760\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove CIRA Config with different config name case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraConfig2",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"ciraConfig2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update CIRA Config when it does not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Edit should not succeed if not exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('CIRA profile ciraconfig2 Not Found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"configName\": \"ciraconfig2\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 201,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove CIRA Config when it doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Deletion should fail with not found message\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('CIRA profile ciraconfig2 Not Found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraconfig2",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs",
								"ciraconfig2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Get All Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {    \r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Request should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('AMT profile profile1 Not Found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile without activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Activation is required\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"Activation accepts either acmactivate (admin control activation) or ccmactivate (client control mode activation)\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with invalid activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when activation is inavlid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Activation accepts either acmactivate (admin control activation) or ccmactivate (client control mode activation)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"activate\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile ccmactivate without amt passwords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when activation is valid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Either generateRandomPassword should be enabled or provide amtPassword\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"If generate random AMT password is disabled, amtPassword is mandatory\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"generateRandomPassword\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile ccmactivate with invalid amtPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains invalid amtPassword\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"AMT password is required field should contains at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"amtPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile acmactivate without mebxPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains acmactivate but no mebxPassword\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MEBx Password is required for acmactivate\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"activation\": \"acmactivate\",\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile acmactivate with invalid mebxPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when mebxPassword is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"MEBx password is required field should contains at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"mebxPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123\",\r\n    \"activation\": \"acmactivate\",\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile[CCM]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profile6\"),\r",
									"    pm.expect(result.amtPassword).to.eql(),\r",
									"    pm.expect(result.mebxPassword).to.eql(),\r",
									"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
									"    pm.expect(result.tags.length).to.equal(1)\r",
									"     pm.expect(result.userConsent).to.eql(\"All\")\r",
									"    pm.expect(result.iderEnabled).to.eql(false)\r",
									"    pm.expect(result.kvmEnabled).to.eql(true)\r",
									"    pm.expect(result.solEnabled).to.eql(false)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true\r\n    }"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with valid kvm options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profileKVMOptions\"),\r",
									"    pm.expect(result.userConsent).to.eql(\"All\")\r",
									"    pm.expect(result.iderEnabled).to.eql(false)\r",
									"    pm.expect(result.kvmEnabled).to.eql(true)\r",
									"    pm.expect(result.solEnabled).to.eql(false)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileKVMOptions\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"userConsent\": \"All\",\r\n    \"iderEnabled\": false,\r\n    \"kvmEnabled\": true,\r\n    \"solEnabled\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with invalid kvm options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail with invalid kvm options\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"User Consenst must be one of None,All,KVM\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"userConsent\")\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"User consent is required for all the actions in client control mode\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"userConsent\")\r",
									"    pm.expect(result.errors[2].msg).to.eql(\"IDER enabled must be a boolean\")\r",
									"    pm.expect(result.errors[2].param).to.eql(\"iderEnabled\")\r",
									"    pm.expect(result.errors[3].msg).to.eql(\"KVM enabled must be a boolean\")\r",
									"    pm.expect(result.errors[3].param).to.eql(\"kvmEnabled\")\r",
									"    pm.expect(result.errors[4].msg).to.eql(\"Serial Over Lan (sol) enabled must be a boolean\")\r",
									"    pm.expect(result.errors[4].param).to.eql(\"solEnabled\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileKVMOptions\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"userConsent\": \"BadValue\",\r\n    \"iderEnabled\": \"foo\",\r\n    \"kvmEnabled\": \"foo\",\r\n    \"solEnabled\": \"foo\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with valid tlsMode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profiletls\"),\r",
									"    pm.expect(result.amtPassword).to.eql(),\r",
									"    pm.expect(result.mebxPassword).to.eql(),\r",
									"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
									"    pm.expect(result.tags.length).to.equal(1)\r",
									"    pm.expect(result.tlsMode).to.equal(4)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profiletls\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"tlsMode\": 4\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with invalid tlsMode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when tlsMode is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"tlsMode must be set to one of these values: 1 (Server Authentication Only), 2 (Server and Non-TLS Authentication), 3 (Mutual TLS only), 4 (Mutual and Non-TLS authentication)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"tlsMode\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"      pm.expect(result.errors[0].value).to.eql(5)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profiletlsinvalid\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"tlsMode\": 5\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profile6\"),\r",
									"    pm.expect(result.amtPassword).to.eql(),\r",
									"    pm.expect(result.mebxPassword).to.eql(),\r",
									"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
									"    pm.expect(result.tags.length).to.equal(1)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/Profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"Profile6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"headerEtag = pm.response.headers.get(\"ETag\");\r",
									"pm.globals.set(\"etag\", headerEtag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {    \r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should equal 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(3);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles?$top=25&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles expect Not Modified",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 304\", function () {\r",
									"    pm.response.to.have.status(304);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.true\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "max-age"
							},
							{
								"key": "If-None-Match",
								"value": "{{etag}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles?$top=25&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles with invalid query params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Request should fail with invalid query string\", function () {\r",
									"    var errors = pm.response.json().errors;\r",
									"    pm.expect(errors[0].param).to.equal('$top');\r",
									"    pm.expect(errors[0].msg).to.equal('The number of items to return should be a positive integer');\r",
									"\r",
									"    pm.expect(errors[1].param).to.equal('$skip');\r",
									"    pm.expect(errors[1].msg).to.equal('The number of items to skip before starting to collect the result set should be a positive integer');\r",
									"    \r",
									"    pm.expect(errors[2].param).to.equal('$count');\r",
									"    pm.expect(errors[2].msg).to.equal('To return total number of records in result set should be boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles?$top=ten&$skip=zero&$count=notboolean",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles"
							],
							"query": [
								{
									"key": "$top",
									"value": "ten"
								},
								{
									"key": "$skip",
									"value": "zero"
								},
								{
									"key": "$count",
									"value": "notboolean"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles with count set to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should equal 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.eql(3);\r",
									"    pm.expect(jsonData.totalCount).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles?$top=25&$skip=0&$count=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles with count set to false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should equal 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles?$top=25&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile[ACM]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should not succeed if exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Unique key violation')\r",
									"    pm.expect(result.message).to.eql('AMT profile profile6 already exists')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"activation\": \"acmactivate\",\r\n    \"dhcpEnabled\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with invalid activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update should fail when payload contains invalid activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Activation accepts either acmactivate (admin control activation) or ccmactivate (client control mode activation)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"activate\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with invalid amtPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains invalid amtPassword\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"AMT password is required field should contains at least one lowercase letter, one uppercase letter, one numeric digit,and one special character and password length should be in between 8 to 32.\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"amtPassword\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"amtPassword\": \"Intel123\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with invalid kvm options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update (PATCH->edit) should fail with invalid kvm options\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"User Consenst must be one of None,All,KVM\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"userConsent\")\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"User consent is required for all the actions in client control mode\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"userConsent\")\r",
									"    pm.expect(result.errors[2].msg).to.eql(\"IDER enabled must be a boolean\")\r",
									"    pm.expect(result.errors[2].param).to.eql(\"iderEnabled\")\r",
									"    pm.expect(result.errors[3].msg).to.eql(\"KVM enabled must be a boolean\")\r",
									"    pm.expect(result.errors[3].param).to.eql(\"kvmEnabled\")\r",
									"    pm.expect(result.errors[4].msg).to.eql(\"Serial Over Lan (sol) enabled must be a boolean\")\r",
									"    pm.expect(result.errors[4].param).to.eql(\"solEnabled\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileKVMOptions\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"userConsent\": \"BadValue\",\r\n    \"iderEnabled\": \"foo\",\r\n    \"kvmEnabled\": \"foo\",\r\n    \"solEnabled\": \"foo\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with valid kvm options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"pm.test(\"Update (PATCH->edit) should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profileKVMOptions\"),\r",
									"    pm.expect(result.userConsent).to.eql(\"All\")\r",
									"    pm.expect(result.iderEnabled).to.eql(false)\r",
									"    pm.expect(result.kvmEnabled).to.eql(true)\r",
									"    pm.expect(result.solEnabled).to.eql(false)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileKVMOptions\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"userConsent\": \"All\",\r\n    \"iderEnabled\": false,\r\n    \"kvmEnabled\": false,\r\n    \"solEnabled\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with invalid tlsMode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains invalid tlsMode\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"tlsMode must be set to one of these values: 1 (Server Authentication Only), 2 (Server and Non-TLS Authentication), 3 (Mutual TLS only), 4 (Mutual and Non-TLS authentication)\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"tlsMode\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"      pm.expect(result.errors[0].value).to.eql(\"invalid\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profiletlsinvalid\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"tlsMode\": \"invalid\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile ccmactivate with password combo false:missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Request fail\", function () {\r",
									"     var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Either generateRandomPassword should be enabled or provide amtPassword\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false    \r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.ciraConfigName).to.eql(null)\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\")\r",
									"    pm.expect(jsonData.tags.length).to.equal(1)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag123\"],\r\n    \"generateRandomPassword\": true,\r\n    \"generateRanodomMEBxPassword\": false,\r\n    \"version\": \"763\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile activation to acmactivate without mebx password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail when payload contains acmactivate without mebx password\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.errors[0].msg).to.eql(\"Either generateRandomPassword should be enabled or provide amtPassword\")\r",
									"    pm.expect(result.errors[0].param).to.eql(\"activation\")\r",
									"    pm.expect(result.errors[0].location).to.eql(\"body\")\r",
									"\r",
									"    pm.expect(result.errors[1].msg).to.eql(\"If generate random AMT password is disabled, amtPassword is mandatory\")\r",
									"    pm.expect(result.errors[1].param).to.eql(\"generateRandomPassword\")\r",
									"    pm.expect(result.errors[1].location).to.eql(\"body\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"acmactivate\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with static mebx password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\") \r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.ciraConfigName).to.eql(null)  \r",
									"    pm.expect(jsonData.tags.length).to.equal(1)     \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"activation\": \"acmactivate\",\r\n    \"generateRandomPassword\": true,\r\n    \"generateRanodomMEBxPassword\": false,\r\n    \"version\": \"766\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with static amt password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.activation).to.equal(\"acmactivate\")    \r",
									"    pm.expect(jsonData.tags.length).to.equal(1)    \r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.ciraConfigName).to.eql(null)  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"acmactivate\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false,\r\n    \"version\": \"767\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile return Conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.activation).to.equal(\"acmactivate\")    \r",
									"    pm.expect(jsonData.tags.length).to.equal(1)    \r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.ciraConfigName).to.eql(null)  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"acmactivate\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false,\r\n    \"version\": \"123\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile return Precondition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.activation).to.equal(\"acmactivate\")    \r",
									"    pm.expect(jsonData.tags.length).to.equal(1)    \r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.ciraConfigName).to.eql(null)  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"type": "text",
								"value": "123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"acmactivate\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false,\r\n    \"version\": \"123\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile kvm options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"type": "text",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profileKVMOptions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profileKVMOptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile tlsMode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profiletls",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profiletls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile when it doesn't exist Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Deletion should fail when profile doesn't exists\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql('Not Found')\r",
									"    pm.expect(result.message).to.eql('AMT profile profile6 Not Found')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Integration",
			"item": [
				{
					"name": "AMT - CIRA Profiles",
					"item": [
						{
							"name": "Create CIRA Config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.configName).to.eql(\"ciraconfig\")\r",
											"    pm.expect(result.mpsServerAddress).to.eql(\"192.168.8.50\"),\r",
											"\tpm.expect(result.mpsPort).to.eql(4433),\r",
											"\tpm.expect(result.username).to.eql(\"admin\"),\r",
											"\tpm.expect(result.commonName).to.eql(\"192.168.8.50\"),\r",
											"\tpm.expect(result.serverAddressFormat).to.eql(3),\r",
											"\tpm.expect(result.authMethod).to.eql(2),\r",
											"\tpm.expect(result.mpsRootCertificate).to.eql(\"rootcert\"),\r",
											"\tpm.expect(result.proxyDetails).to.eql(\"\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"configName\": \"ciraconfig\",\r\n    \"mpsServerAddress\": \"192.168.8.50\",\r\n    \"mpsPort\": 4433,\r\n    \"username\": \"admin\",\r\n    \"commonName\": \"192.168.8.50\",\r\n    \"serverAddressFormat\": 3,\r\n    \"authMethod\": 2,\r\n    \"mpsRootCertificate\": \"rootcert\",\r\n    \"proxyDetails\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ciraconfigs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Profile with CIRA config that doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail when ciraconfig does not exist\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.contain(\"Foreign key constraint violation\"),\r",
											"    pm.expect(result.message).to.eql(\"Referenced constraint nociraconfig doesn't exist\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"profile-ciraconfig\",\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"activation\": \"acmactivate\",\r\n    \"ciraConfigName\": \"nociraconfig\",\r\n    \"dhcpEnabled\": true\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Profile with CIRA config and Static",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Creation should pass when DHCP is disabled and CIRA config name is given\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"profile-ciraconfig-static\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"acmactivate\"),\r",
											"    pm.expect(result.ciraConfigName).to.eql(\"ciraconfig\")\r",
											"    pm.expect(result.dhcpEnabled).to.eql(false),\r",
											"    pm.expect(result.ciraConfigName).to.eql(\"ciraconfig\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"profile-ciraconfig-static\",\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"activation\": \"acmactivate\",\r\n    \"ciraConfigName\": \"ciraconfig\",\r\n    \"dhcpEnabled\": false\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"profile-ciraconfig\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"acmactivate\"),\r",
											"    pm.expect(result.ciraConfigName).to.eql(\"ciraconfig\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"profile-ciraconfig\",\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"activation\": \"acmactivate\",\r\n    \"ciraConfigName\": \"ciraconfig\",\r\n    \"dhcpEnabled\": true\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CIRA Config associated with profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Deletion should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.eql(\"Foreign key violation\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraconfig",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ciraconfigs",
										"ciraconfig"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CIRA Config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Update should succeed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.configName).to.eql(\"ciraconfig\")\r",
											"    pm.expect(jsonData.mpsServerAddress).to.equal(\"192.168.8.50\")\r",
											"    pm.expect(jsonData.mpsPort).to.eql(4433)\r",
											"    pm.expect(jsonData.username).to.equal(\"admin\")\r",
											"    pm.expect(jsonData.commonName).to.eql(\"192.168.8.50\")\r",
											"    pm.expect(jsonData.serverAddressFormat).to.equal(3)    \r",
											"    pm.expect(jsonData.mpsRootCertificate).to.equal(\"rootcert\")\r",
											"    pm.expect(jsonData.proxyDetails).to.equal(\"\")\r",
											"    pm.expect(jsonData.authMethod).to.equal(2)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"configName\": \"ciraconfig\",\r\n    \"regeneratePassword\": true,\r\n    \"version\": \"771\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ciraconfigs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CIRA Config return Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Update should succeed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.configName).to.eql(\"ciraconfig\")\r",
											"    pm.expect(jsonData.mpsServerAddress).to.equal(\"192.168.8.50\")\r",
											"    pm.expect(jsonData.mpsPort).to.eql(4433)\r",
											"    pm.expect(jsonData.username).to.equal(\"admin\")\r",
											"    pm.expect(jsonData.commonName).to.eql(\"192.168.8.50\")\r",
											"    pm.expect(jsonData.serverAddressFormat).to.equal(3)    \r",
											"    pm.expect(jsonData.mpsRootCertificate).to.equal(\"rootcert\")\r",
											"    pm.expect(jsonData.proxyDetails).to.equal(\"\")\r",
											"    pm.expect(jsonData.authMethod).to.equal(2)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"configName\": \"ciraconfig\",\r\n    \"regeneratePassword\": true,\r\n    \"version\": \"123\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ciraconfigs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CIRA Config return Precondition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 412\", function () {\r",
											"    pm.response.to.have.status(412);\r",
											"});\r",
											"pm.test(\"Update should succeed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.configName).to.eql(\"ciraconfig\")\r",
											"    pm.expect(jsonData.mpsServerAddress).to.equal(\"192.168.8.50\")\r",
											"    pm.expect(jsonData.mpsPort).to.eql(4433)\r",
											"    pm.expect(jsonData.username).to.equal(\"admin\")\r",
											"    pm.expect(jsonData.commonName).to.eql(\"192.168.8.50\")\r",
											"    pm.expect(jsonData.serverAddressFormat).to.equal(3)    \r",
											"    pm.expect(jsonData.mpsRootCertificate).to.equal(\"rootcert\")\r",
											"    pm.expect(jsonData.proxyDetails).to.equal(\"\")\r",
											"    pm.expect(jsonData.authMethod).to.equal(2)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "If-Match",
										"type": "text",
										"value": "123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"configName\": \"ciraconfig\",\r\n    \"regeneratePassword\": true,\r\n    \"version\": \"123\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ciraconfigs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Profile with CIRA config and Static",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Creation should pass when DHCP is disabled and CIRA config name is given\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"profile-ciraconfig-static\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"acmactivate\"),\r",
											"    pm.expect(result.ciraConfigName).to.eql(\"ciraconfig\")\r",
											"    pm.expect(result.dhcpEnabled).to.eql(false)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"profile-ciraconfig-static\",\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"activation\": \"acmactivate\",\r\n    \"ciraConfigName\": \"ciraconfig\",\r\n    \"dhcpEnabled\": false,\r\n    \"version\": \"773\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile-ciraconfig",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										"profile-ciraconfig"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Profile CIRA-Static",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile-ciraconfig-static",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										"profile-ciraconfig-static"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove CIRA Config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs/ciraconfig",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ciraconfigs",
										"ciraconfig"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AMT - WIFI Profiles",
					"item": [
						{
							"name": "Create Wireless Profile(home)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.profileName).to.eql(\"home\");\r",
											"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
											"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
											"    pm.expect(jsonData.ssid).to.eql(\"test\");\r",
											"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
											"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
											"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"home\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wireless Profile(office)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.profileName).to.eql(\"office\");\r",
											"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
											"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
											"    pm.expect(jsonData.ssid).to.eql(\"admin\");\r",
											"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
											"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
											"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"office\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"admin\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with DHCP enabled false and Wifi configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"Wifi supports only DHCP in AMT\"),\r",
											"    pm.expect(result.errors[0].param).to.eql(\"wifiConfigs\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with priority greater than 255 for wifiConfig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"wifi config priority should be an integer and between 1 and 255\"),\r",
											"    pm.expect(result.errors[0].param).to.eql(\"wifiConfigs\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 355,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with priority less than 1 for wifiConfig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"wifi config priority should be an integer and between 1 and 255\"),\r",
											"    pm.expect(result.errors[0].param).to.eql(\"wifiConfigs\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": -1,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with wifiConfigs and without DHCP enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"Invalid value\"),\r",
											"    pm.expect(result.errors[0].param).to.eql(\"dhcpEnabled\")\r",
											"\r",
											"    pm.expect(result.errors[1].msg).to.eql(\"DHCP enabled must be a boolean\"),\r",
											"    pm.expect(result.errors[1].param).to.eql(\"dhcpEnabled\")\r",
											"\r",
											"    pm.expect(result.errors[2].msg).to.eql(\"Wifi supports only DHCP in AMT\"),\r",
											"    pm.expect(result.errors[2].param).to.eql(\"wifiConfigs\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT Profile with wifiConfigs that does not exist in db",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"wifi configs home2,test does not exists in db\"),\r",
											"    pm.expect(result.errors[0].param).to.eql(\"wifiConfigs\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"test\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"    pm.expect(result.wifiConfigs.length).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[0].priority).to.equal(1)\r",
											"    pm.expect(result.wifiConfigs[0].profileName).to.equal(\"home\")\r",
											"    pm.expect(result.wifiConfigs[1].priority).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[1].profileName).to.equal(\"office\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"acm\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Result should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"    pm.expect(result.wifiConfigs.length).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[0].priority).to.equal(1)\r",
											"    pm.expect(result.wifiConfigs[0].profileName).to.equal(\"home\")\r",
											"    pm.expect(result.wifiConfigs[1].priority).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[1].profileName).to.equal(\"office\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/wifi-profile",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										"wifi-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile with wifiConfigs that does not exist in db",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"wifi configs test does not exists in db\"),\r",
											"    pm.expect(result.errors[0].param).to.eql(\"wifiConfigs\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"test\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with DHCP enabled false and Wifi configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"Wifi supports only DHCP in AMT\"),\r",
											"    pm.expect(result.errors[0].param).to.eql(\"wifiConfigs\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with priority greater than 255 for wifiConfig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"wifi config priority should be an integer and between 1 and 255\"),\r",
											"    pm.expect(result.errors[0].param).to.eql(\"wifiConfigs\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 355,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with priority less than 1 for wifiConfig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"wifi config priority should be an integer and between 1 and 255\"),\r",
											"    pm.expect(result.errors[0].param).to.eql(\"wifiConfigs\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": -1,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile - DHCP enabled to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n   \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"version\": \"783\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile return Conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n   \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"version\": \"783\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile return Precondition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 412\", function () {\r",
											"    pm.response.to.have.status(412);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "If-Match",
										"value": "123",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n   \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"version\": \"783\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile - with wificonfigs and without DHCP enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.errors[0].msg).to.eql(\"DHCP enabled should be true\");\r",
											"    pm.expect(result.errors[0].param).to.eql(\"wifiConfigs\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n     \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile - DHCP enabled to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"    pm.expect(result.wifiConfigs.length).to.equal(0)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"version\": \"786\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wireless Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.profileName).to.eql(\"business\");\r",
											"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
											"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
											"    pm.expect(jsonData.ssid).to.eql(\"admin\");\r",
											"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
											"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
											"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"business\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"admin\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile - append wifi configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"    pm.expect(result.wifiConfigs.length).to.equal(0)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"dhcpEnabled\": true,\r\n    \"version\": \"787\",\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        },\r\n        {\r\n            \"priority\": 3,\r\n            \"profileName\": \"business\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile2\"),\r",
											"    pm.expect(result.activation).to.eql(\"acmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs.length).to.equal(3)\r",
											"    pm.expect(result.wifiConfigs[0].priority).to.equal(1)\r",
											"    pm.expect(result.wifiConfigs[0].profileName).to.equal(\"home\")\r",
											"    pm.expect(result.wifiConfigs[1].priority).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[1].profileName).to.equal(\"office\")\r",
											"     pm.expect(result.wifiConfigs[2].priority).to.equal(3)\r",
											"    pm.expect(result.wifiConfigs[2].profileName).to.equal(\"business\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile2\",\r\n    \"activation\": \"acmactivate\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"tags\": [\"acm\", \"random password\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        },\r\n        {\r\n            \"priority\": 3,\r\n            \"profileName\": \"business\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET ALL AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Result should contain two profiles\", function () {\r",
											"    var result = pm.response.json();\r",
											"     pm.expect(result.length).to.equal(2)\r",
											"});\r",
											"\r",
											"pm.test(\"Profile one\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result[0].profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result[0].amtPassword).to.eql(),\r",
											"    pm.expect(result[0].mebxPassword).to.eql(),\r",
											"    pm.expect(result[0].activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result[0].tags.length).to.equal(1)\r",
											"    pm.expect(result[0].wifiConfigs.length).to.equal(0)\r",
											"});\r",
											"\r",
											"pm.test(\"Profile two\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result[1].profileName).to.eql(\"wifi-profile2\"),\r",
											"    pm.expect(result[1].activation).to.eql(\"acmactivate\")\r",
											"    pm.expect(result[1].tags.length).to.equal(2)\r",
											"    pm.expect(result[1].wifiConfigs.length).to.equal(3)\r",
											"    pm.expect(result[1].wifiConfigs[0].priority).to.equal(1)\r",
											"    pm.expect(result[1].wifiConfigs[0].profileName).to.equal(\"home\")\r",
											"    pm.expect(result[1].wifiConfigs[1].priority).to.equal(2)\r",
											"    pm.expect(result[1].wifiConfigs[1].profileName).to.equal(\"office\")\r",
											"    pm.expect(result[1].wifiConfigs[2].priority).to.equal(3)\r",
											"    pm.expect(result[1].wifiConfigs[2].profileName).to.equal(\"business\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Wireless Profile associated with AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"deletion should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.eql(\"Foreign key violation\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/office",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										"office"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/wifi-profile2",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										"wifi-profile2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"type": "text",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/wifi-profile",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										"wifi-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Wireless Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/home",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										"home"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Wireless Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/office",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										"office"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Wireless Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/business",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										"business"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Wireless",
			"item": [
				{
					"name": "All profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "A Specific Profile doesn't exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Wireless profile sampleProfile Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/sampleProfile",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								"sampleProfile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with invalid auth method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"Authentication method should be either 4(WPA PSK) or 6(WPA2 PSK)\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"authenticationMethod\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 10,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with invalid encryption method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"Encryption method should be either 3(TKIP) or 4(CCMP)\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"encryptionMethod\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 6,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with SSID length greater than 32",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum length is 32\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"ssid\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"wirelessProfile1234512345123456789\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with psk pass phrase less than 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"PSK Passphrase length should be greater than or equal to 8 and less than or equal to 63\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"pskPassphrase\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Inte123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with psk pass phrase greater than 63",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"PSK Passphrase length should be greater than or equal to 8 and less than or equal to 63\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"pskPassphrase\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request should return profile just created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"P1\");\r",
									"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
									"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
									"    pm.expect(jsonData.ssid).to.eql(\"test\");\r",
									"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
									"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
									"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Duplicate Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Request should return an error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Unique key violation\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Wireless profile P1 already exists\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "A Specific Profile that exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should wifi profile\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"P1\");\r",
									"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
									"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
									"    pm.expect(jsonData.ssid).to.eql(\"test\");\r",
									"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
									"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
									"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
									"    pm.expect(jsonData.pskPassphrase).to.eql();\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/P1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								"P1"
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"headerEtag = pm.response.headers.get(\"ETag\");\r",
									"pm.globals.set(\"etag\", headerEtag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs?$top=25&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles (Cached)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 304\", function () {\r",
									"    pm.response.to.have.status(304);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var res = (_.isEmpty(responseBody));\r",
									"    pm.expect(res).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "max-age",
								"type": "text"
							},
							{
								"key": "If-None-Match",
								"value": "{{etag}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs?$top=25&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles with invalid query params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Request should fail with invalid query string\", function () {\r",
									"    var errors = pm.response.json().errors;\r",
									"    pm.expect(errors[0].param).to.equal('$top');\r",
									"    pm.expect(errors[0].msg).to.equal('The number of items to return should be a positive integer');\r",
									"\r",
									"    pm.expect(errors[1].param).to.equal('$skip');\r",
									"    pm.expect(errors[1].msg).to.equal('The number of items to skip before starting to collect the result set should be a positive integer');\r",
									"    \r",
									"    pm.expect(errors[2].param).to.equal('$count');\r",
									"    pm.expect(errors[2].msg).to.equal('To return total number of records in result set should be boolean');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs?$top=ten&$skip=zero&$count=notboolean",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "ten"
								},
								{
									"key": "$skip",
									"value": "zero"
								},
								{
									"key": "$count",
									"value": "notboolean"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles with count set to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.eql(1);\r",
									"    pm.expect(jsonData.totalCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs?$top=25&$skip=0&$count=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles with count set to false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs?$top=25&$skip=0&$count=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request should return profile just created\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"P1\");\r",
									"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
									"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
									"    pm.expect(jsonData.ssid).to.eql(\"test1\");\r",
									"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
									"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
									"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test1\",\r\n    \"pskPassphrase\": \"Intel@123!\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with invalid encryption method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"Encryption method should be either 3(TKIP) or 4(CCMP)\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"encryptionMethod\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 6,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with invalid auth method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"Authentication method should be either 4(WPA PSK) or 6(WPA2 PSK)\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"authenticationMethod\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 10,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with SSID length greater than 32",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"Maximum length is 32\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"ssid\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"wirelessProfile1234512345123456789\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with psk pass phrase less than 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"PSK Passphrase length should be greater than or equal to 8 and less than or equal to 63\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"pskPassphrase\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Inte123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with psk pass phrase greater than 63",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors[0].msg).to.eql(\"PSK Passphrase length should be greater than or equal to 8 and less than or equal to 63\");\r",
									"    pm.expect(jsonData.errors[0].param).to.eql(\"pskPassphrase\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile that does not exits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Wireless profile P12 Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P12\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/P1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								"P1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile that doesn't exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Result should wifi profile\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
									"    pm.expect(jsonData.message).to.eql(\"Wireless profile P11 Not Found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/P11",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								"P11"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {    \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Version request should succeed\", function () {\r",
							"    var result = pm.response.json();\r",
							"    pm.expect(result.protocolVersion).to.eql(\"4.0.0\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "X-RPS-API-Key",
						"type": "text",
						"value": "APIKEYFORRPS123!"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/v1/admin/version/",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"admin",
						"version",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {    \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Version request should succeed\", function () {\r",
							"    var result = pm.response.json();\r",
							"    pm.expect(result.db.status).to.eql(\"OK\")\r",
							"    pm.expect(result.secretStore.status.initialized).to.eql(true)\r",
							"    pm.expect(result.secretStore.status.sealed).to.eql(false)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6IiIsImlzcyI6IjlFbVJKVGJJaUliNGJJZVNzbWdjV0lqclI2SHlFVHFjIiwiZXhwIjoxNjM2NTg1OTU5fQ.avy8aQdpMZoos-q63qTPObbR3iFiWuod6pjoElNRUu0",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{host}}/api/v1/admin/health",
					"protocol": "{{protocol}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"admin",
						"health"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRJZCI6IiIsImlzcyI6IjlFbVJKVGJJaUliNGJJZVNzbWdjV0lqclI2SHlFVHFjIiwiZXhwIjoxNjMxMjk3MjAyfQ.m99vUJ9HrD3sHxZd6PLFO4UXTYjXqrnFRxEfW2zmqlA",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}