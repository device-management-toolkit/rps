openapi: 3.0.0
info:
  title: Remote Provisioning Server API
  contact: {}
  version: 1.5.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    This section is a reference to the RPS API methods available in the Open AMT Cloud Toolkit, and to some commands it provides. 
    Please note when running behind the Kong API proxy the following prefix must be prepended:
    * `/rps` for all routes

    GET Domains Example:
    * Direct connection to RPS: `{{protocol}}://{{host}}/api/v1/admin/domains`

    * Connection to RPS through Kong: `{{protocol}}://{{host}}/rps/api/v1/admin/domains`

servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/rbheopenamt/rps/1.5.0
- url: http://example.com:8081/api/v1/admin
  variables: {}
security:
  - BearerAuth: []
paths:
  /api/v1/domains:
    get:
      tags:
      - Domains
      summary: Get All Domains
      operationId: GetAllDomains
      description: Retrieves all of the domain configuration profiles stored in the database.  Will not return the provisioning certificate or certificate password to protect the privacy of these assets
      parameters:
        - in: query
          name: $skip
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: $top
          schema:
            type: integer
          description: The number of items to return
        - in: query
          name: $count
          schema:
            type: boolean
          description: The total number of domains to return
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
                schema:
                  oneOf:
                    - type: array
                      items:
                        $ref: '#/components/schemas/DomainResponse'
                    - $ref: '#/components/schemas/CountDomainResponse'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    post:
      tags:
      - Domains
      summary: Create Domain
      operationId: CreateDomain
      description: Creates a new domain configuration profile to the database.  The provisioning certificate and certificate password are stored in a secrets manager and are only used when required during activation.  Provisioning certificate must be a base64 string of the Personal Information Exchange (PFX) certificate that includes the entire certificate chain and private key.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainSubmit'
        required: true
      responses:
        201:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    patch:
      tags:
      - Domains
      summary: Update Domain Suffix
      operationId: UpdateDomainSuffix
      description: Edits an existing domain configuration profile.  The profileName field can not be changed.  The provisioning certificate and certificate password are stored in a secrets manager and are only used when required during activation.  Provisioning certificate must be a base64 string of the Personal Information Exchange (PFX) certificate that includes the entire certificate chain and private key.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainSubmit'
        required: true
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /api/v1/domains/{profileName}:
    get:
      tags:
        - Domains
      summary: Get Domain
      operationId: GetDomain
      description: Retrieves the specific domain configuration profile.
      parameters:
      - name: profileName
        in: path
        description: Name of domain profile to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/DomainResponse'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
          
      deprecated: false
    delete:
      tags:
      - Domains
      summary: Remove Domain
      operationId: RemoveDomain
      description: Removes the specific domain configuration profile
      parameters:
      - name: profileName
        in: path
        description: Name of domain profile to remove
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'successful operation'
          headers: {}
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /api/v1/ciraconfigs:
    get:
      tags:
      - CIRA
      summary: Get All CIRA Configs
      operationId: GetAllCIRAConfigs
      description: Retrieves all of the CIRA configuration profiles from the database.  Will not return the password field to protect the privacy of this asset
      parameters:
        - in: query
          name: $skip
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: $top
          schema:
            type: integer
          description: The number of items to return
        - in: query
          name: $count
          schema:
            type: boolean
          description: The total number of CIRA configs to return
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/CIRAConfigResponse'
                  - $ref: '#/components/schemas/CountCIRAResponse'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    post:
      tags:
      - CIRA
      summary: Create CIRA Config
      operationId: CreateCIRAConfig
      description: Creates a new CIRA configuration profile.  The password is stored in a secrets manager and is only used during configuration to set the MPS credentials in the AMT device.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIRAConfigSubmit'
        required: true
      responses:
        201:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIRAConfigResponse'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    patch:
      tags:
      - CIRA
      summary: Edit CIRA Config
      operationId: EditCIRAConfig
      description: Edits an existing CIRA configuration profile.  The configName can not be changed.  The password is stored in a secrets manager and is only used during configuration to set the MPS credentials in the AMT device.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIRAConfigSubmit'
        required: true
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIRAConfigResponse'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /api/v1/ciraconfigs/{configName}:
    get:
      tags:
      - CIRA
      summary: Get CIRA Config
      operationId: GetCIRAConfig
      description: Retrieves the specific CIRA configuration profile from the database.  Will not return the password field to protect the privacy of this asset.
      parameters:
      - name: configName
        in: path
        description: Name of CIRA config to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIRAConfigResponse'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    delete:
      tags:
      - CIRA
      summary: Remove CIRA Config
      operationId: RemoveCIRAConfig
      description: Removes the specific CIRA configuration profile from the database.
      parameters:
      - name: configName
        in: path
        description: Name of CIRA config to return
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'successful operation'
          headers: {}
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /api/v1/wirelessconfigs:
    get:
      tags:
      - Wireless
      summary: Get All Wireless Configs
      operationId: GetAllWirelessConfigs
      description: Retrieves all of the Wireless configuration profiles from the database.  Will not return the password field to protect the privacy of this asset.
      parameters:
        - in: query
          name: $skip
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: $top
          schema:
            type: integer
          description: The number of items to return
        - in: query
          name: $count
          schema:
            type: boolean
          description: The total number of wireless configs to return
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/WirelessConfigResponse'
                  - $ref: '#/components/schemas/CountWirelessResponse'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    post:
      tags:
      - Wireless
      summary: Create Wireless Config
      operationId: CreateWirelessConfig
      description: Creates a new Wireless configuration profile.  The PSK passphrase is stored in a secrets manager and is only used during configuration to set the Wi-Fi credentials in the AMT device.
      requestBody:
        description: 'authenticationMethod valid values: 4 - WPA PSK, 6 - WPA2 PSK.  encryptionMethod valid values: 3 - TKIP, 4 - CCMP'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WirelessConfigSubmit'
        required: true
      responses:
        201:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WirelessConfigResponse'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    patch:
      tags:
      - Wireless
      summary: Edit Wireless Config
      operationId: EditWirelessConfig
      description: Edits an existing Wireless configuration profile.  The profileName can not be changed.  The password is stored in a secrets manager and is only used during configuration to set the Wi-Fi credentials in the AMT device.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WirelessConfigSubmit'
        required: true
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WirelessConfigResponse'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false  
  /api/v1/wirelessconfigs/{configName}:
    get:
      tags:
      - Wireless
      summary: Get Wireless Config
      operationId: GetWirelessConfig
      description: Retrieves the specific Wireless configuration profile from the database.  Will not return the password field to protect the privacy of this asset.
      parameters:
      - name: configName
        in: path
        description: Name of Wireless config to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WirelessConfigResponse'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    delete:
      tags:
      - Wireless
      summary: Remove Wireless Config
      operationId: RemoveWirelessConfig
      description: Removes the specific Wireless configuration profile from the database.
      parameters:
      - name: configName
        in: path
        description: Name of Wireless config to return
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'successful operation'
          headers: {}
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /api/v1/profiles:
    get:
      tags:
      - Profiles
      summary: Get All Profiles
      operationId: GetAllProfiles
      description: Retrieves all of the AMT configuration profiles from the database.  Will not return the amtPassword or mebxPassword fields to protect the privacy of these assets.
      parameters:
        - in: query
          name: $skip
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: $top
          schema:
            type: integer
          description: The number of items to return
        - in: query
          name: $count
          schema:
            type: boolean
          description: The total number of profiles to return
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/ProfileResponse'
                  - $ref: '#/components/schemas/CountProfileResponse'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    post:
      tags:
      - Profiles
      summary: Create Profile
      operationId: CreateProfile
      description: Creates a new AMT configuration profile.  The amtPassword and mebxPassword are stored in a secrets manager and are only used during activation and configuration, respectively, to set these credentials in the AMT device.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileSubmit'
        required: true
      responses:
        201:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    patch:
      tags:
      - Profiles
      summary: Update Profile
      operationId: UpdateProfile
      description: Edits an existing AMT configuration profile.  The profileName can not be changed.  The amtPassword and mebxPassword are stored in a secrets manager and are only used during activation and configuration, respectively, to set these credentials in the AMT device.
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileSubmit'
        required: true
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /api/v1/profiles/{profileName}:
    get:
      tags:
      - Profiles
      summary: Get Profile
      operationId: GetProfile
      description: Retrieves the specific AMT configuration profile from the database.  Will not return the amtPassword or mebxPassword fields to protect the privacy of these assets.
      parameters:
      - name: profileName
        in: path
        description: Name of profile to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    delete:
      tags:
      - Profiles
      summary: Remove Profile
      operationId: RemoveProfile
      description: Removes the specific AMT configuration profile from the database.
      parameters:
      - name: profileName
        in: path
        description: Name of profile to return
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'successful operation'
          headers: {}
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /version:
    get:
      tags:
      - Misc
      summary: Get Version
      operationId: GetVersion
      description: Returns the supported protocol version.  This is used to check compatibility with RPC
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
      deprecated: false
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    DomainSubmit:
      title: DomainSubmit
      type: object
      required:
      - profileName
      - domainSuffix
      - provisioningCertStorageFormat
      - provisioningCert
      - provisioningCertPassword
      properties:
        profileName:
          type: string
        domainSuffix:
          type: string
        provisioningCertStorageFormat:
          type: string
        provisioningCert:
          type: string
          format: byte
        provisioningCertPassword:
          type: string
          format: password
      example:
        profileName: NewDomain
        domainSuffix: NewDomain.com
        provisioningCertStorageFormat: string
        provisioningCert: U3dhZ2dlciByb2Nrcw==
        provisioningCertPassword: G@ppm0ym
    DomainResponse:
      title: DomainResponse
      type: object
      required:
      - profileName
      - domainSuffix
      - provisioningCertStorageFormat
      properties:
        tenantId:
          type: string
        profileName:
          type: string
        domainSuffix:
          type: string
        provisioningCertStorageFormat:
          type: string
      example:
        tenantId: ''
        profileName: NewDomain
        domainSuffix: NewDomain.com
        provisioningCertStorageFormat: string
    CIRAConfigSubmit:
      title: CIRAConfigSubmit
      required:
      - configName
      - mpsServerAddress
      - mpsPort
      - username
      - password
      - commonName
      - serverAddressFormat
      - authMethod
      - mpsRootCertificate
      - proxyDetails
      type: object
      properties:
        configName:
          type: string
        mpsServerAddress:
          type: string
        mpsPort:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
          format: password
        commonName:
          type: string
        serverAddressFormat:
          type: integer
          format: int32
        authMethod:
          type: integer
          format: int32
        mpsRootCertificate:
          type: string
          format: byte
        proxyDetails:
          type: string
      example:
        configName: ciraconfig
        mpsServerAddress: 192.168.8.50
        mpsPort: 4433
        username: mps
        password: G@ppm0ym
        commonName: 192.168.8.50
        serverAddressFormat: 3
        authMethod: 2
        mpsRootCertificate: U3dhZ2dlciByb2Nrcw==
        proxyDetails: ''      
    CIRAConfigResponse:
      title: CIRAConfigResponse
      required:
      - configName
      - mpsServerAddress
      - mpsPort
      - username
      - commonName
      - serverAddressFormat
      - authMethod
      - mpsRootCertificate
      - proxyDetails
      type: object
      properties:
        configName:
          type: string
        mpsServerAddress:
          type: string
        mpsPort:
          type: integer
          format: int32
        username:
          type: string
        commonName:
          type: string
        serverAddressFormat:
          type: integer
          format: int32
        authMethod:
          type: integer
          format: int32
        mpsRootCertificate:
          type: string
          format: byte
        proxyDetails:
          type: string
        tenantId:
          type: string
      example:
        configName: ciraconfig
        mpsServerAddress: 192.168.8.50
        mpsPort: 4433
        username: mps
        commonName: 192.168.8.50
        serverAddressFormat: 3
        authMethod: 2
        mpsRootCertificate: U3dhZ2dlciByb2Nrcw==
        proxyDetails: '' 
        tenantId: ''     
    ProfileSubmit:
      title: ProfileSubmit
      required:
      - profileName
      - amtPassword
      - generateRandomPassword
      - activation
      - ciraConfigName
      - networkConfigName
      - mebxPassword
      - generateRandomMEBxPassword
      - tags
      - dhcpEnabled
      - wifiConfigs
      type: object
      properties:
        profileName:
          type: string
        amtPassword:
          type: string
          format: password
        generateRandomPassword:
          type: boolean
        activation:
          type: string
        ciraConfigName:
          type: string
        networkConfigName:
          type: string
        mebxPassword:
          type: string
          format: password
        generateRandomMEBxPassword:
          type: boolean
        tags:
          type: array
          items:
            type: string
        dhcpEnabled:
          type: boolean
        wifiConfigs:
          type: array
          items:
            type: object
      example:
        profileName: profile1
        amtPassword: G@ppm0ym
        generateRandomPassword: false
        activation: acmactivate      
        ciraConfigName: ciraconfig
        networkConfigName: dhcp_enabled
        mebxPassword: G@ppm0ym
        generateRandomMEBxPassword: false
        tags: [tag1, tag2]
        dhcpEnabled: true
        wifiConfigs: [
          {
              priority: 1,
              profileName: "home"
          },
          {
              priority: 2,
              profileName: "office"
          }
        ]
    ProfileResponse:
      title: ProfileResponse
      required:
      - profileName
      - generateRandomPassword
      - activation
      - ciraConfigName
      - networkConfigName
      - generateRandomMEBxPassword
      - tags
      - dhcpEnabled
      - wifiConfigs
      type: object
      properties:
        profileName:
          type: string
        generateRandomPassword:
          type: boolean
        activation:
          type: string
        ciraConfigName:
          type: string
        networkConfigName:
          type: string
        generateRandomMEBxPassword:
          type: boolean
        tags:
          type: array
          items:
            type: string
        dhcpEnabled:
          type: boolean
        tenantId:
          type: string
        wifiConfigs:
          type: array
          items:
            type: object
      example:
        profileName: profile1
        generateRandomPassword: false
        configurationScript: null
        activation: acmactivate      
        ciraConfigName: ciraconfig
        networkConfigName: dhcp_enabled
        generateRandomMEBxPassword: false
        tenantId: ""
        tags: [tag1, tag2]
        dhcpEnabled: true
        wifiConfigs: [
          {
              priority: 1,
              profileName: "home"
          },
          {
              priority: 2,
              profileName: "office"
          }
        ]
    WirelessConfigSubmit:
      title: WirelessConfigSubmit
      required:
      - profileName
      - authenticationMethod
      - encryptionMethod
      - ssid
      - pskPassphrase
      - linkPolicy
      type: object
      properties:
        profileName:
          type: string
        authenticationMethod:
          type: integer
        encryptionMethod:
          type: integer
        ssid:
          type: string
        pskPassphrase:
          type: string
        linkPolicy:
          type: array
          items:
            type: integer
      example:
        profileName: homeWifiConfig
        authenticationMethod: 4
        encryptionMethod: 4
        ssid: home
        pskPassphrase: P@ssw0rd
        linkPolicy: [14, 16]
    WirelessConfigResponse:
      title: WirelessConfigResponse
      required:
      - profileName
      - authenticationMethod
      - encryptionMethod
      - ssid
      - linkPolicy
      type: object
      properties:
        profileName:
          type: string
        authenticationMethod:
          type: integer
        encryptionMethod:
          type: integer
        ssid:
          type: string
        linkPolicy:
          type: array
          items:
            type: integer
        tenantId:
          type: string
      example:
        profileName: homeWifiConfig
        authenticationMethod: 4
        encryptionMethod: 4
        ssid: home
        tenantId: ""
        linkPolicy: [14, 16]
    VersionResponse:
      title: VersionResponse
      required:
        - protocolVersion
      type: object
      properties:
        protocolVersion:
          type: string
      example:
        protocolVersion: 4.0.0
    CountDomainResponse:
      title: CountDomainResponse
      type: object 
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DomainResponse'  
        totalCount:
          type: integer
    CountCIRAResponse:
      title: CountCIRAResponse
      type: object 
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CIRAConfigResponse'  
        totalCount:
          type: integer
    CountProfileResponse:
      title: CountProfileResponse
      type: object 
      properties:
        data:
          type: array
          items:
             $ref: '#/components/schemas/ProfileResponse'
        totalCount:
          type: integer
    CountWirelessResponse:
      title: CountWirelessResponse
      type: object 
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WirelessConfigResponse'
        totalCount:
          type: integer
    APIResponse:
      title: APIResponse 
      type: object
      properties:
        error:
          type: string
        message:
          type: string

tags:
- name: Domains
- name: CIRA
- name: Wireless
- name: Profiles
- name: Integration
- name: Misc
  description: ''